"""
Django settings for vitruvian project.

Generated by 'django-admin startproject' using Django 2.2.13.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""

import os
import uuid

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(
    os.path.dirname(
        os.path.dirname(
            os.path.abspath(__file__)
        )
    )
)

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# TODO: need to put the secret to environ variable
SECRET_KEY = os.environ.get('SECRET_KEY', 'secret_key')

ALLOWED_HOSTS = ['*']

# See https://docs.djangoproject.com/zh-hans/3.0/ref/settings/#std:setting-INTERNAL_IPS
INTERNAL_IPS = ['127.0.0.1']

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

START_APPS = [

]

THIRD_PARTY_APPS = [
    'django_extensions',
    'rest_framework',
    'drf_yasg',
    'corsheaders',
    # 'django_celery_beat',
]

INSTALLED_APPS += START_APPS + THIRD_PARTY_APPS

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.locale.LocaleMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'vitruvian.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'django.template.context_processors.i18n',
            ],
        },
    },
]

WSGI_APPLICATION = 'vitruvian.wsgi.application'

# Database
# https://docs.djangoproject.com/en/2.2/ref/settings/#databases
# Using PostgreSQL as Database

POSTGRES_SERVICE = os.environ.get('POSTGRES_SERVICE')
POSTGRES_DB = os.environ.get('POSTGRES_DB')
POSTGRES_PASSWORD = os.environ.get('POSTGRES_PASSWORD')
POSTGRES_PORT = os.environ.get('POSTGRES_PORT')
POSTGRES_USER = os.environ.get('POSTGRES_USER')

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'HOST': POSTGRES_SERVICE,
        'NAME': POSTGRES_DB,
        'PASSWORD': POSTGRES_PASSWORD,
        'PORT': POSTGRES_PORT,
        'USER': POSTGRES_USER
    }
}

POSTGRES_EXTRA_DB_BACKEND_BASE = 'django.db.backends.postgresql'

# Using Redis as Cache Server
REDIS_HOST = os.environ.get('REDIS_HOST', 'vitruvian-redis')
REDIS_CACHE_LOCATION = f'redis://{REDIS_HOST}:6379'

CACHES = {
    'default': {
        'BACKEND': 'django_redis.cache.RedisCache',
        'LOCATION': REDIS_CACHE_LOCATION,
        'OPTIONS': {
            'DB': 1,
        }
    }
}

# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/
# https://medium.com/@lililala/%E5%9F%8B%E5%9D%91%E5%AF%A6%E9%A9%97%E5%AE%A4-django-%E5%A4%9A%E5%9C%8B%E8%AA%9E%E8%A8%80-ef73f359332e


LANGUAGE_CODE = 'zh-hant'

TIME_ZONE = 'Asia/Taipei'

from django.utils.translation import gettext_lazy as _

LANGUAGES = (
    ('en', _('English')),
    ('zh-hans', _('Simplified Chinese')),
    ('zh-hant', _('Traditional Chinese')),
)

USE_I18N = True
USE_L10N = True
USE_TZ = True

# i18n locale
LOCALE_PATHS = (
    os.path.join(BASE_DIR, 'locale'),
)

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/

STATIC_ROOT = 'static'
STATIC_URL = '/static/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'upload')
MEDIA_URL = '/upload/'

# Maximum number of GET/POST parameters that will be read before a
# SuspiciousOperation (TooManyFieldsSent) is raised.
DATA_UPLOAD_MAX_NUMBER_FIELDS = 10240

EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'

# Session settings
SESSION_ENGINE = 'django.contrib.sessions.backends.cache'
SESSION_SAVE_EVERY_REQUEST = True
SESSION_COOKIE_SAMESITE = None

# rabbitmq
RABBITMQ_DEFAULT_USER = os.environ.get('RABBITMQ_DEFAULT_USER')
RABBITMQ_DEFAULT_PASS = os.environ.get('RABBITMQ_DEFAULT_PASS')
RABBITMQ_DEFAULT_VHOST = os.environ.get('RABBITMQ_DEFAULT_VHOST', '')
RABBITMQ_HOST = os.environ.get('RABBITMQ_HOST', 'vitruvian-rabbitmq')

BROKER_URL = (f'amqp://{RABBITMQ_DEFAULT_USER}:{RABBITMQ_DEFAULT_PASS}'
              f'@{RABBITMQ_HOST}:5672/{RABBITMQ_DEFAULT_VHOST}')

CELERY_ACCEPT_CONTENT = ['pickle', 'json']
CELERY_RESULT_BACKEND = 'rpc://'
CELERY_TASK_IGNORE_RESULT = True

CP = os.environ.get('CP', f'undefined-{uuid.uuid4().hex}')

# TODO: add rabbitmq support and celery support here

PROXY = os.environ.get('PROXY', None)
PROXY = {'http': PROXY, 'https': PROXY} if PROXY else None

CREDENTIAL_PATH = "/gs/credentials.json"
GS_BUCKET_NAME = os.getenv('GS_BUCKET_NAME')
# TODO: add the oauth2 for using GS bucket

ENV = os.getenv('ENV')

# TODO: add the jwt support
VITRUVIAN_HS256_SECRET = os.environ.get('VITRUVIAN_HS256_SECRET', 'thisshouldnotbedefault')
VITRUVIAN_ENCODE_ALGO = os.environ.get('VITRUVIAN_ENCODE_ALGO', 'HS256')
JWT_AUTH_HEADER_PREFIX = 'JWT'

# TODO: add rest framework setting
